FROM ubuntu:14.04

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update && apt-get install -y \
        build-essential \
        curl \
        git \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        pkg-config \
        python-dev \
        python-numpy \
        python-pip \
        software-properties-common \
        swig \
        zip \
        zlib1g-dev \
        libcurl3-dev \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py

# Set up grpc
RUN apt-get -q update && pip install grpcio

RUN pip install mock

# Set up Bazel.

# We need to add a custom PPA to pick up JDK8, since trusty doesn't
# have an openjdk8 backport.  openjdk-r is maintained by a reliable contributor:
# Matthias Klose (https://launchpad.net/~doko).  It will do until
# we either update the base image beyond 14.04 or openjdk-8 is
# finally backported to trusty; see e.g.
#   https://bugs.launchpad.net/trusty-backports/+bug/1368094
RUN add-apt-repository -y ppa:openjdk-r/ppa && \
    apt-get update && \
    apt-get install -y openjdk-8-jdk openjdk-8-jre-headless && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Running bazel inside a `docker build` command causes trouble, cf:
#   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >>/root/.bazelrc
# Similarly, we need to workaround sandboxing issues:
#   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
    >>/root/.bazelrc
ENV BAZELRC /root/.bazelrc
# Install the most recent bazel release.
ENV BAZEL_VERSION 0.4.5
WORKDIR /
RUN mkdir /bazel && \
    cd /bazel && \
    curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE.txt && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

RUN apt-get -q update && apt-get -y -q install wget && \
    wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_8.0.61-1_amd64.deb && \
    dpkg -i cuda-repo-ubuntu1404_8.0.61-1_amd64.deb && \
    apt-get -q update && \
    apt-get -y install cuda

ADD libcudnn6-dev_6.0.20-1+cuda8.0_amd64.deb /libcudnn6-dev_6.0.20-1+cuda8.0_amd64.deb

ADD libcudnn6_6.0.20-1+cuda8.0_amd64.deb /libcudnn6_6.0.20-1+cuda8.0_amd64.deb

RUN dpkg -i libcudnn6_6.0.20-1+cuda8.0_amd64.deb

RUN dpkg -i libcudnn6-dev_6.0.20-1+cuda8.0_amd64.deb

RUN git clone --recurse-submodules https://github.com/tensorflow/serving

RUN bash -c "cd serving/tensorflow && ./configure <<< $'/usr/bin/python2.7\n\ny\nN\nN\ny\n\nN\ny\nN\n\n8.0\n\n6\n/usr/lib/x86_64-linux-gnu\n\n'"

RUN ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.6 /usr/local/cuda/lib64/libcudnn.so.6

RUN ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so /usr/local/cuda/lib64/libcudnn.so

RUN sed -i.bak 's/@org_tensorflow\/\/third_party\/gpus\/crosstool/@local_config_cuda\/\/crosstool:toolchain/g' /serving/tools/bazel.rc

RUN cd serving && bazel clean --expunge

ENV TF_NEED_CUDA 1

RUN sed -i.bak 's/"\/\/tensorflow\/contrib\/nccl:nccl_py"/#     "\/\/tensorflow\/contrib\/nccl:nccl_py"/g' /serving/tensorflow/tensorflow/contrib/BUILD

RUN cd serving && bazel build --config=opt --config=cuda tensorflow_serving/...

CMD ["/bin/bash"]
